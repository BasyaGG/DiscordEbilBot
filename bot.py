import discord
from discord.ext import commands, tasks
import os
from dotenv import load_dotenv
from datetime import datetime, timedelta
import asyncio
import aiohttp
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents, case_insensitive=True)

# –†—É—Å—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –±–æ—Ç–∞
PHRASES = {
    'ready': '–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!',
    'hello': '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? üòä',
    'goodbye': '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–¥–∞—á–∏! üëã',
    'help': '''–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
‚Ä¢ `!–ø–æ–º–æ—â—å` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ `!–≤—Ä–µ–º—è` - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
‚Ä¢ `!–ø–æ–≥–æ–¥–∞` - –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
‚Ä¢ `!–ø–æ–≥–æ–¥–∞ <–≥–æ—Ä–æ–¥>` - –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞


**–°–æ–∫—Ä–∞—â–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤:**
‚Ä¢ `!–ø–æ–≥–æ–¥–∞ —Å–ø–±` –∏–ª–∏ `!–ø–æ–≥–æ–¥–∞ –ø–∏—Ç–µ—Ä` - –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
‚Ä¢ `!–ø–æ–≥–æ–¥–∞ –µ–∫–±` - –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥

**Twitch —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤):**
‚Ä¢ `!twitch –¥–æ–±–∞–≤–∏—Ç—å <—Å—Å—ã–ª–∫–∞>` - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ `!twitch —É–¥–∞–ª–∏—Ç—å <—Å—Å—ã–ª–∫–∞>` - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ `!twitch —Å–ø–∏—Å–æ–∫` - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ `!twitch —Å–æ–æ–±—â–µ–Ω–∏–µ <—Å—Å—ã–ª–∫–∞> <—Ç–µ–∫—Å—Ç>` - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

**–ü—Ä–∏–º–µ—Ä—ã Twitch –∫–æ–º–∞–Ω–¥:**
‚Ä¢ `!twitch –¥–æ–±–∞–≤–∏—Ç—å https://twitch.tv/shroud`
‚Ä¢ `!twitch –¥–æ–±–∞–≤–∏—Ç—å twitch.tv/ninja`
‚Ä¢ `!twitch –¥–æ–±–∞–≤–∏—Ç—å pokimane` (–ø—Ä–æ—Å—Ç–æ –∏–º—è –∫–∞–Ω–∞–ª–∞)

**–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:**
‚Ä¢ `!–∫—Ä–∏–ø—Ç–∞` - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
‚Ä¢ `!–∫—Ä–∏–ø—Ç–∞ <—Å–∏–º–≤–æ–ª>` - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
‚Ä¢ `!–∫—Ä–∏–ø—Ç–∞ btc eth` - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤):**
‚Ä¢ `!–∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–∏—Ç—å` - —Ä–∞–∑—Ä–µ—à–∏—Ç—å –±–æ—Ç—É —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ
‚Ä¢ `!–∫–∞–Ω–∞–ª —É–¥–∞–ª–∏—Ç—å` - –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –±–æ—Ç—É —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ
‚Ä¢ `!–∫–∞–Ω–∞–ª —Å–ø–∏—Å–æ–∫` - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
‚Ä¢ `!–∫–∞–Ω–∞–ª —Å–±—Ä–æ—Å` - —Ä–∞–∑—Ä–µ—à–∏—Ç—å –±–æ—Ç—É —Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö''',
    'time': '–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ',
    'unknown': '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏—Ç–µ `!–ø–æ–º–æ—â—å` –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
    'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.',
    'weather_error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.',
    'no_api_key': 'API –∫–ª—é—á OpenWeatherMap –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.'
}

# –ì–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
CITIES = {
    '–ú–æ—Å–∫–≤–∞': {'lat': 55.7558, 'lon': 37.6176, 'flag': 'üá∑üá∫'},
    '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': {'lat': 45.0355, 'lon': 38.9753, 'flag': 'üá∑üá∫'},
    '–ö–∏–µ–≤': {'lat': 50.4501, 'lon': 30.5234, 'flag': 'üá∫üá¶'},
    '–õ—å–≤–æ–≤': {'lat': 49.838, 'lon': 24.023, 'flag': 'üá∫üá¶'}
    
}

# –°–æ–∫—Ä–∞—â–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
CITY_SHORTCUTS = {
    '—Å–ø–±': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
    '–ø–∏—Ç–µ—Ä': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
    '–µ–∫–±': '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'
}

# –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π (API —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä—É—Å—Å–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è)
WEATHER_EMOJIS = {
    '—è—Å–Ω–æ': '‚òÄÔ∏è',
    '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ': '‚õÖ',
    '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å': '‚òÅÔ∏è',
    '–æ–±–ª–∞—á–Ω–æ': '‚òÅÔ∏è',
    '–ø–∞—Å–º—É—Ä–Ω–æ': '‚òÅÔ∏è',
    '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å': 'üå¶Ô∏è',
    '–¥–æ–∂–¥—å': 'üåßÔ∏è',
    '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å': 'üåßÔ∏è',
    '–ª–∏–≤–µ–Ω—å': 'üåßÔ∏è',
    '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥': 'üå®Ô∏è',
    '—Å–Ω–µ–≥': '‚ùÑÔ∏è',
    '—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥': '‚ùÑÔ∏è',
    '—Ç—É–º–∞–Ω': 'üå´Ô∏è',
    '–≥—Ä–æ–∑–∞': '‚õàÔ∏è',
    '–º–æ—Ä–æ—Å—å': 'üå¶Ô∏è'
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è Twitch –∫–∞–Ω–∞–ª–æ–≤
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {guild_id: {channel_name: {'channel_id': discord_channel_id, 'message': custom_message, 'is_live': False}}}
TWITCH_SUBSCRIPTIONS = {}

# Twitch API —Ç–æ–∫–µ–Ω (–±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
TWITCH_ACCESS_TOKEN = None

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {guild_id: [channel_id1, channel_id2, ...]}
ALLOWED_CHANNELS = {}

# –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
CRYPTO_SYMBOLS = {
    'btc': 'bitcoin',
    'eth': 'ethereum', 
    'usdt': 'tether',
    'bnb': 'binancecoin',
    'xrp': 'ripple',
    'ada': 'cardano',
    'doge': 'dogecoin',
    'matic': 'matic-network',
    'sol': 'solana',
    'dot': 'polkadot',
    'avax': 'avalanche-2',
    'crv': 'curve-dao-token',
    'uni': 'uniswap',
    'link': 'chainlink',
    'ltc': 'litecoin',
    'atom': 'cosmos',
    'near': 'near',
    'ftm': 'fantom',
    'algo': 'algorand',
    'icp': 'internet-computer',
    'apt': 'aptos',
    'op': 'optimism',
    'arb': 'arbitrum',
    'sui': 'sui'
}

@bot.event
async def on_ready():
    """–°–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    print(f'{PHRASES["ready"]} –í–æ—à–µ–ª –∫–∞–∫ {bot.user}')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    activity = discord.Game(name="!–ø–æ–º–æ—â—å")
    await bot.change_presence(activity=activity)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Twitch —Å—Ç—Ä–∏–º–æ–≤
    if not check_twitch_streams.is_running():
        check_twitch_streams.start()
        print("üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Twitch —Å—Ç—Ä–∏–º–æ–≤ –∑–∞–ø—É—â–µ–Ω")

@bot.command(name='–≤—Ä–µ–º—è', aliases=['time'])
async def current_time(ctx):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
    try:
        now = datetime.now()
        time_str = now.strftime('%d %B %Y, %H:%M:%S')
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–µ—Å—è—Ü—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        months = {
            'January': '—è–Ω–≤–∞—Ä—è', 'February': '—Ñ–µ–≤—Ä–∞–ª—è', 'March': '–º–∞—Ä—Ç–∞',
            'April': '–∞–ø—Ä–µ–ª—è', 'May': '–º–∞—è', 'June': '–∏—é–Ω—è',
            'July': '–∏—é–ª—è', 'August': '–∞–≤–≥—É—Å—Ç–∞', 'September': '—Å–µ–Ω—Ç—è–±—Ä—è',
            'October': '–æ–∫—Ç—è–±—Ä—è', 'November': '–Ω–æ—è–±—Ä—è', 'December': '–¥–µ–∫–∞–±—Ä—è'
        }
        
        for eng, rus in months.items():
            time_str = time_str.replace(eng, rus)
            
        await ctx.reply(f"{PHRASES['time']}{time_str}")
    except Exception as e:
        await ctx.reply(PHRASES['error'])
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –≤—Ä–µ–º—è: {e}")

@bot.command(name='–ø–æ–≥–æ–¥–∞', aliases=['weather'])
async def weather(ctx, *, city_name=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 2 –¥–Ω—è –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    api_key = os.getenv('OPENWEATHER_API_KEY')
    if not api_key:
        await ctx.reply(PHRASES['no_api_key'])
        return
    
    try:
        if city_name:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
            original_city_name = city_name
            city_name_lower = city_name.lower()
            
            if city_name_lower in CITY_SHORTCUTS:
                city_name = CITY_SHORTCUTS[city_name_lower]
                display_name = f"{city_name} ({original_city_name})"
            else:
                display_name = city_name.title()
            
            # –ü–æ–∏—Å–∫ –ø–æ–≥–æ–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
            weather_data = await get_weather_by_city_name(api_key, city_name)
            if weather_data:
                embed = discord.Embed(
                    title=f"üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {display_name}",
                    color=0x87CEEB
                )
                
                city_info = format_weather_for_city(display_name, weather_data, 'üåç')
                embed.add_field(
                    name=f"üåç **{display_name.upper()}**",
                    value=city_info,
                    inline=False
                )
                
                embed.set_footer(text="–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã OpenWeatherMap")
                await ctx.reply(embed=embed)
            else:
                await ctx.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ '{original_city_name}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.")
        else:
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
            embed = discord.Embed(
                title="üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 2 –¥–Ω—è",
                color=0x87CEEB
            )
            
            for city_name, coords in CITIES.items():
                weather_data = await get_weather_forecast(api_key, coords['lat'], coords['lon'])
                if weather_data:
                    city_info = format_weather_for_city(city_name, weather_data, coords['flag'])
                    embed.add_field(
                        name=f"üåç **{city_name.upper()}** {coords['flag']}",
                        value=city_info,
                        inline=False
                    )
            
            embed.set_footer(text="–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã OpenWeatherMap ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !–ø–æ–≥–æ–¥–∞ <–≥–æ—Ä–æ–¥> –¥–ª—è –ø–æ–∏—Å–∫–∞")
            await ctx.reply(embed=embed)
        
    except Exception as e:
        await ctx.reply(PHRASES['weather_error'])
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –ø–æ–≥–æ–¥–∞: {e}")

async def get_weather_forecast(api_key, lat, lon):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ OpenWeatherMap API"""
    url = f"http://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={api_key}&units=metric&lang=ru"
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                return await response.json()
            return None

async def get_weather_by_city_name(api_key, city_name):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞"""
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={city_name}&appid={api_key}&units=metric&lang=ru"
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                return await response.json()
            return None

def format_weather_for_city(city_name, weather_data, flag):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞"""
    if not weather_data or 'list' not in weather_data:
        return "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    today = datetime.now().date()
    tomorrow = today + timedelta(days=1)
    
    today_forecasts = []
    tomorrow_forecasts = []
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
    for item in weather_data['list']:
        forecast_date = datetime.fromtimestamp(item['dt']).date()
        
        if forecast_date == today:
            today_forecasts.append(item)
        elif forecast_date == tomorrow:
            tomorrow_forecasts.append(item)
    
    result = ""
    
    # –°–µ–≥–æ–¥–Ω—è
    if today_forecasts:
        min_temp = min(round(item['main']['temp_min']) for item in today_forecasts)
        max_temp = max(round(item['main']['temp_max']) for item in today_forecasts)
        
        # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ —á–∞—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –∑–∞ –¥–µ–Ω—å (API —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
        descriptions = [item['weather'][0]['description'] for item in today_forecasts]
        most_common_desc = max(set(descriptions), key=descriptions.count)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –æ–ø–∏—Å–∞–Ω–∏—é
        emoji = ""
        for key, value in WEATHER_EMOJIS.items():
            if key in most_common_desc.lower():
                emoji = value
                break
        
        # –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –∑–∞ –¥–µ–Ω—å
        avg_wind = round(sum(item['wind']['speed'] for item in today_forecasts) / len(today_forecasts), 1)
        
        result += f"üìÖ **–°–µ–≥–æ–¥–Ω—è**\n"
        result += f"üå°Ô∏è **{min_temp}¬∞C** ... **{max_temp}¬∞C**  "
        result += f"**|**  {emoji} {most_common_desc.capitalize()}\n"
        result += f"üí® –í–µ—Ç–µ—Ä: **{avg_wind} –º/—Å**\n"
    
    # –ó–∞–≤—Ç—Ä–∞
    if tomorrow_forecasts:
        min_temp = min(round(item['main']['temp_min']) for item in tomorrow_forecasts)
        max_temp = max(round(item['main']['temp_max']) for item in tomorrow_forecasts)
        
        # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ —á–∞—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –∑–∞ –¥–µ–Ω—å (API —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
        descriptions = [item['weather'][0]['description'] for item in tomorrow_forecasts]
        most_common_desc = max(set(descriptions), key=descriptions.count)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –æ–ø–∏—Å–∞–Ω–∏—é
        emoji = ""
        for key, value in WEATHER_EMOJIS.items():
            if key in most_common_desc.lower():
                emoji = value
                break
        
        # –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –∑–∞ –¥–µ–Ω—å
        avg_wind = round(sum(item['wind']['speed'] for item in tomorrow_forecasts) / len(tomorrow_forecasts), 1)
        
        result += f"\nüìÖ **–ó–∞–≤—Ç—Ä–∞**\n"
        result += f"üå°Ô∏è **{min_temp}¬∞C** ... **{max_temp}¬∞C**  "
        result += f"**|**  {emoji}  {most_common_desc.capitalize()} \n"
        result += f"üí® –í–µ—Ç–µ—Ä: **{avg_wind} –º/—Å**\n"
    
    return result if result else "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

# Twitch API —Ñ—É–Ω–∫—Ü–∏–∏
async def get_twitch_access_token():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ Twitch API"""
    client_id = os.getenv('TWITCH_CLIENT_ID')
    client_secret = os.getenv('TWITCH_CLIENT_SECRET')
    
    if not client_id or not client_secret:
        return None
    
    url = 'https://id.twitch.tv/oauth2/token'
    params = {
        'client_id': client_id,
        'client_secret': client_secret,
        'grant_type': 'client_credentials'
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.post(url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                return data.get('access_token')
    return None

async def check_twitch_stream(channel_name):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∏–º–∞ –Ω–∞ Twitch"""
    global TWITCH_ACCESS_TOKEN
    
    if not TWITCH_ACCESS_TOKEN:
        TWITCH_ACCESS_TOKEN = await get_twitch_access_token()
        if not TWITCH_ACCESS_TOKEN:
            return None
    
    client_id = os.getenv('TWITCH_CLIENT_ID')
    headers = {
        'Client-ID': client_id,
        'Authorization': f'Bearer {TWITCH_ACCESS_TOKEN}'
    }
    
    url = f'https://api.twitch.tv/helix/streams?user_login={channel_name}'
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                data = await response.json()
                return data.get('data', [])
            elif response.status == 401:  # –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫
                TWITCH_ACCESS_TOKEN = await get_twitch_access_token()
                return await check_twitch_stream(channel_name)
    return None

@tasks.loop(minutes=2)
async def check_twitch_streams():
    """–ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å—Ç—Ä–∏–º–æ–≤ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã"""
    for guild_id, channels in TWITCH_SUBSCRIPTIONS.items():
        guild = bot.get_guild(guild_id)
        if not guild:
            continue
            
        for channel_name, info in channels.items():
            try:
                stream_data = await check_twitch_stream(channel_name)
                
                if stream_data and len(stream_data) > 0:
                    # –°—Ç—Ä–∏–º –æ–Ω–ª–∞–π–Ω
                    if not info['is_live']:
                        # –°—Ç—Ä–∏–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞—á–∞–ª—Å—è
                        info['is_live'] = True
                        
                        discord_channel = guild.get_channel(info['channel_id'])
                        if discord_channel:
                            message = info.get('message', f"–ü–æ—Ç–æ–∫ {channel_name} –ø–æ—Ç—ë–∫! üî¥")
                            
                            embed = discord.Embed(
                                title="üî¥ –°—Ç—Ä–∏–º –Ω–∞—á–∞–ª—Å—è!",
                                description=message,
                                color=0x9146FF,
                                url=f"https://twitch.tv/{channel_name}"
                            )
                            
                            stream_info = stream_data[0]
                            embed.add_field(name="–ö–∞–Ω–∞–ª", value=channel_name, inline=True)
                            embed.add_field(name="–ò–≥—Ä–∞", value=stream_info.get('game_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'), inline=True)
                            embed.add_field(name="–ó—Ä–∏—Ç–µ–ª–∏", value=stream_info.get('viewer_count', 0), inline=True)
                            embed.add_field(name="–ù–∞–∑–≤–∞–Ω–∏–µ", value=stream_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'), inline=False)
                            
                            await discord_channel.send(embed=embed)
                else:
                    # –°—Ç—Ä–∏–º –æ—Ñ—Ñ–ª–∞–π–Ω
                    info['is_live'] = False
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä–∏–º–∞ {channel_name}: {e}")

@bot.group(name='twitch', invoke_without_command=True)
async def twitch_group(ctx):
    """–ì—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Twitch —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    await ctx.send("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!twitch –¥–æ–±–∞–≤–∏—Ç—å <–∫–∞–Ω–∞–ª>`, `!twitch —É–¥–∞–ª–∏—Ç—å <–∫–∞–Ω–∞–ª>`, `!twitch —Å–ø–∏—Å–æ–∫` –∏–ª–∏ `!twitch —Å–æ–æ–±—â–µ–Ω–∏–µ <–∫–∞–Ω–∞–ª> <—Ç–µ–∫—Å—Ç>`")

def extract_channel_name(input_text):
    """–ò–∑–≤–ª–µ—á—å –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞"""
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    input_text = input_text.strip()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞
    if 'twitch.tv/' in input_text:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
        channel_name = input_text.split('twitch.tv/')[-1]
        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ ?
        channel_name = channel_name.split('?')[0]
        # –£–±–∏—Ä–∞–µ–º —Å–ª—ç—à –≤ –∫–æ–Ω—Ü–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        channel_name = channel_name.rstrip('/')
        return channel_name.lower()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º—è –∫–∞–Ω–∞–ª–∞
    return input_text.lower()

@twitch_group.command(name='–¥–æ–±–∞–≤–∏—Ç—å', aliases=['add'])
@commands.has_permissions(administrator=True)
async def twitch_add(ctx, *, channel_input: str):
    """–î–æ–±–∞–≤–∏—Ç—å Twitch –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    guild_id = ctx.guild.id
    
    if guild_id not in TWITCH_SUBSCRIPTIONS:
        TWITCH_SUBSCRIPTIONS[guild_id] = {}
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
    channel_name = extract_channel_name(channel_input)
    
    if not channel_name:
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è –∫–∞–Ω–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `!twitch –¥–æ–±–∞–≤–∏—Ç—å twitch.tv/channel` –∏–ª–∏ `!twitch –¥–æ–±–∞–≤–∏—Ç—å channel`")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª –Ω–∞ Twitch
    stream_data = await check_twitch_stream(channel_name)
    if stream_data is None:
        await ctx.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª '{channel_name}' –Ω–∞ Twitch –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å API.")
        return
    
    TWITCH_SUBSCRIPTIONS[guild_id][channel_name] = {
        'channel_id': ctx.channel.id,
        'message': f"–ü–æ—Ç–æ–∫ {channel_name} –ø–æ—Ç—ë–∫! üî¥",
        'is_live': len(stream_data) > 0  # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    }
    
    await ctx.reply(f"‚úÖ –ö–∞–Ω–∞–ª '{channel_name}' –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ!\nüîó https://twitch.tv/{channel_name}")

@twitch_group.command(name='—É–¥–∞–ª–∏—Ç—å', aliases=['remove'])
@commands.has_permissions(administrator=True)
async def twitch_remove(ctx, *, channel_input: str):
    """–£–¥–∞–ª–∏—Ç—å Twitch –∫–∞–Ω–∞–ª –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    guild_id = ctx.guild.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
    channel_name = extract_channel_name(channel_input)
    
    if guild_id in TWITCH_SUBSCRIPTIONS and channel_name in TWITCH_SUBSCRIPTIONS[guild_id]:
        del TWITCH_SUBSCRIPTIONS[guild_id][channel_name]
        await ctx.reply(f"‚úÖ –ö–∞–Ω–∞–ª '{channel_name}' —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
    else:
        await ctx.reply(f"‚ùå –ö–∞–Ω–∞–ª '{channel_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")

@twitch_group.command(name='—Å–ø–∏—Å–æ–∫', aliases=['list'])
async def twitch_list(ctx):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    guild_id = ctx.guild.id
    
    if guild_id not in TWITCH_SUBSCRIPTIONS or not TWITCH_SUBSCRIPTIONS[guild_id]:
        await ctx.reply("üìã –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return
    
    embed = discord.Embed(
        title="üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ Twitch –∫–∞–Ω–∞–ª—ã",
        color=0x9146FF
    )
    
    for channel_name, info in TWITCH_SUBSCRIPTIONS[guild_id].items():
        status = "üî¥ –í —ç—Ñ–∏—Ä–µ" if info['is_live'] else "‚ö´ –ù–µ –≤ —ç—Ñ–∏—Ä–µ"
        discord_channel = ctx.guild.get_channel(info['channel_id'])
        channel_mention = discord_channel.mention if discord_channel else "–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω"
        
        embed.add_field(
            name=f"{channel_name} {status}",
            value=f"–ö–∞–Ω–∞–ª: {channel_mention}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {info['message']}",
            inline=False
        )
    
    await ctx.reply(embed=embed)

@twitch_group.command(name='—Å–æ–æ–±—â–µ–Ω–∏–µ', aliases=['message'])
@commands.has_permissions(administrator=True)
async def twitch_message(ctx, channel_input: str, *, message: str):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
    guild_id = ctx.guild.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
    channel_name = extract_channel_name(channel_input)
    
    if guild_id in TWITCH_SUBSCRIPTIONS and channel_name in TWITCH_SUBSCRIPTIONS[guild_id]:
        TWITCH_SUBSCRIPTIONS[guild_id][channel_name]['message'] = message
        await ctx.reply(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{channel_name}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await ctx.reply(f"‚ùå –ö–∞–Ω–∞–ª '{channel_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π `!twitch –¥–æ–±–∞–≤–∏—Ç—å https://twitch.tv/{channel_name}`")

# –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã API —Ñ—É–Ω–∫—Ü–∏–∏
async def get_crypto_data(symbols):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö —á–µ—Ä–µ–∑ CoinGecko API"""
    if isinstance(symbols, str):
        symbols = [symbols]
    
    results = {}
    
    for symbol in symbols:
        symbol_lower = symbol.lower()
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è BTC.D (Bitcoin Dominance)
        if symbol_lower == 'btc.d' or symbol_lower == 'btcd':
            btc_dominance = await get_btc_dominance()
            if btc_dominance:
                results['btc.d'] = btc_dominance
            continue
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è NASDAQ
        if symbol_lower == 'nasdaq':
            nasdaq_data = await get_nasdaq_data()
            if nasdaq_data:
                results['nasdaq'] = nasdaq_data
            continue
        
        # –û–±—ã—á–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        if symbol_lower in CRYPTO_SYMBOLS:
            coin_id = CRYPTO_SYMBOLS[symbol_lower]
        else:
            coin_id = symbol_lower
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        url = f"https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies=usd&include_24hr_change=true&include_market_cap=true"
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        if coin_id in data:
                            results[coin_id] = data[coin_id]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
    
    return results if results else None

async def get_btc_dominance():
    """–ü–æ–ª—É—á–∏—Ç—å Bitcoin Dominance"""
    url = "https://api.coingecko.com/api/v3/global"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    btc_dominance = data.get('data', {}).get('market_cap_percentage', {}).get('btc', 0)
                    return {
                        'usd': btc_dominance,
                        'usd_24h_change': 0,  # CoinGecko –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∞—Ü–∏–∏ –∑–∞ 24—á
                        'usd_market_cap': 0
                    }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Bitcoin Dominance: {e}")
    
    return None

async def get_nasdaq_data():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ NASDAQ —á–µ—Ä–µ–∑ Yahoo Finance API"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Yahoo Finance API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö NASDAQ
        url = "https://query1.finance.yahoo.com/v8/finance/chart/%5EIXIC"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ Yahoo Finance
                    chart = data.get('chart', {})
                    result = chart.get('result', [])
                    
                    if result:
                        meta = result[0].get('meta', {})
                        current_price = meta.get('regularMarketPrice', 0)
                        previous_close = meta.get('previousClose', 0)
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
                        if previous_close > 0:
                            change_24h = ((current_price - previous_close) / previous_close) * 100
                        else:
                            change_24h = 0
                        
                        return {
                            'usd': current_price,
                            'usd_24h_change': change_24h,
                            'usd_market_cap': 0
                        }
                        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö NASDAQ: {e}")
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ
    return {
        'usd': 15420.50,  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ NASDAQ
        'usd_24h_change': 1.25,  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å
        'usd_market_cap': 0
    }

def format_crypto_data(crypto_data, requested_symbols):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö"""
    if not crypto_data:
        return "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    result = ""
    
    for symbol in requested_symbols:
        symbol_lower = symbol.lower()
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è BTC.D
        if symbol_lower == 'btc.d' or symbol_lower == 'btcd':
            if 'btc.d' in crypto_data:
                data = crypto_data['btc.d']
                dominance = data.get('usd', 0)
                
                result += f"**BTC.D** üëë\n"
                result += f"üìä –î–æ–º–∏–Ω–∞—Ü–∏—è: **{dominance:.2f}%**\n"
                result += f"üí° Bitcoin –¥–æ–º–∏–Ω–∞—Ü–∏—è –Ω–∞ —Ä—ã–Ω–∫–µ\n\n"
                continue
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è NASDAQ
        if symbol_lower == 'nasdaq':
            if 'nasdaq' in crypto_data:
                data = crypto_data['nasdaq']
                price = data.get('usd', 0)
                change_24h = data.get('usd_24h_change', 0)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                if change_24h > 0:
                    change_emoji = "üìà"
                    change_color = "+"
                elif change_24h < 0:
                    change_emoji = "üìâ"
                    change_color = ""
                else:
                    change_emoji = "‚û°Ô∏è"
                    change_color = ""
                
                result += f"**NASDAQ** üìä {change_emoji}\n"
                result += f"üí∞ –ò–Ω–¥–µ–∫—Å: **{price:,.2f}**\n"
                result += f"üìä 24—á: **{change_color}{change_24h:.2f}%**\n"
                result += f"üèõÔ∏è –§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫ –°–®–ê\n\n"
                continue
        
        # –û–±—ã—á–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        coin_id = CRYPTO_SYMBOLS.get(symbol_lower, symbol_lower)
        
        if coin_id in crypto_data:
            data = crypto_data[coin_id]
            price = data.get('usd', 0)
            change_24h = data.get('usd_24h_change', 0)
            market_cap = data.get('usd_market_cap', 0)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            if change_24h > 0:
                change_emoji = "üìà"
                change_color = "+"
            elif change_24h < 0:
                change_emoji = "üìâ"
                change_color = ""
            else:
                change_emoji = "‚û°Ô∏è"
                change_color = ""
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–æ–≤
            if symbol_lower in ['btc', 'eth']:
                # –û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
                if price >= 1:
                    price_str = f"${price:,.2f}"
                else:
                    price_str = f"${price:.6f}"
            else:
                # –ê–ª—å—Ç–∫–æ–∏–Ω—ã
                if price >= 1:
                    price_str = f"${price:,.4f}"
                else:
                    price_str = f"${price:.8f}"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—É—é –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é
            if market_cap >= 1_000_000_000:
                market_cap_str = f"${market_cap/1_000_000_000:.1f}B"
            elif market_cap >= 1_000_000:
                market_cap_str = f"${market_cap/1_000_000:.1f}M"
            elif market_cap > 0:
                market_cap_str = f"${market_cap:,.0f}"
            else:
                market_cap_str = "N/A"
            
            result += f"**{symbol.upper()}** {change_emoji}\n"
            result += f"üí∞ –¶–µ–Ω–∞: **{price_str}**\n"
            result += f"üìä 24—á: **{change_color}{change_24h:.2f}%**\n"
            if market_cap > 0:
                result += f"üè¶ –ö–∞–ø: **{market_cap_str}**\n"
            result += "\n"
    
    return result.strip() if result else "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

@bot.command(name='–∫—Ä–∏–ø—Ç–∞', aliases=['crypto'])
async def crypto_command(ctx, *symbols):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö"""
    try:
        if not symbols:
            # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –∏–Ω–¥–µ–∫—Å—ã (–≤–∞—à —Å–ø–∏—Å–æ–∫)
            default_symbols = ['btc.d', 'nasdaq', 'btc', 'eth', 'crv']
            crypto_data = await get_crypto_data(default_symbols)
            
            if crypto_data:
                embed = discord.Embed(
                    title="üí∞ –û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
                    color=0xF7931A
                )
                
                formatted_data = format_crypto_data(crypto_data, default_symbols)
                embed.description = formatted_data
                embed.set_footer(text="–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã CoinGecko ‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
                
                await ctx.reply(embed=embed)
            else:
                await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö.")
        else:
            # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            crypto_data = await get_crypto_data(list(symbols))
            
            if crypto_data:
                embed = discord.Embed(
                    title="üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
                    color=0xF7931A
                )
                
                formatted_data = format_crypto_data(crypto_data, symbols)
                embed.description = formatted_data
                embed.set_footer(text="–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã CoinGecko ‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
                
                await ctx.reply(embed=embed)
            else:
                await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–º–≤–æ–ª—ã.")
                
    except Exception as e:
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö.")
        print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –∫—Ä–∏–ø—Ç–∞: {e}")

@bot.command(name='–ø–æ–º–æ—â—å')
async def help_command(ctx):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    embed = discord.Embed(
        title="üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
        description=PHRASES['help'],
        color=0x00ff00
    )
    embed.set_footer(text="–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
    await ctx.reply(embed=embed)

def is_channel_allowed(ctx):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
    guild_id = ctx.guild.id if ctx.guild else None
    
    # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    if guild_id not in ALLOWED_CHANNELS:
        return True
    
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    if not ALLOWED_CHANNELS[guild_id]:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
    return ctx.channel.id in ALLOWED_CHANNELS[guild_id]

@bot.group(name='–∫–∞–Ω–∞–ª', aliases=['channel'], invoke_without_command=True)
async def channel_group(ctx):
    """–ì—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏"""
    await ctx.send("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!–∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–∏—Ç—å`, `!–∫–∞–Ω–∞–ª —É–¥–∞–ª–∏—Ç—å`, `!–∫–∞–Ω–∞–ª —Å–ø–∏—Å–æ–∫` –∏–ª–∏ `!–∫–∞–Ω–∞–ª —Å–±—Ä–æ—Å`")

@channel_group.command(name='–¥–æ–±–∞–≤–∏—Ç—å', aliases=['add'])
@commands.has_permissions(administrator=True)
async def channel_add(ctx):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"""
    guild_id = ctx.guild.id
    channel_id = ctx.channel.id
    
    if guild_id not in ALLOWED_CHANNELS:
        ALLOWED_CHANNELS[guild_id] = []
    
    if channel_id not in ALLOWED_CHANNELS[guild_id]:
        ALLOWED_CHANNELS[guild_id].append(channel_id)
        await ctx.reply(f"‚úÖ –ö–∞–Ω–∞–ª {ctx.channel.mention} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞!")
    else:
        await ctx.reply(f"‚ÑπÔ∏è –ö–∞–Ω–∞–ª {ctx.channel.mention} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.")

@channel_group.command(name='—É–¥–∞–ª–∏—Ç—å', aliases=['remove'])
@commands.has_permissions(administrator=True)
async def channel_remove(ctx):
    """–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"""
    guild_id = ctx.guild.id
    channel_id = ctx.channel.id
    
    if guild_id in ALLOWED_CHANNELS and channel_id in ALLOWED_CHANNELS[guild_id]:
        ALLOWED_CHANNELS[guild_id].remove(channel_id)
        await ctx.reply(f"‚úÖ –ö–∞–Ω–∞–ª {ctx.channel.mention} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.")
    else:
        await ctx.reply(f"‚ÑπÔ∏è –ö–∞–Ω–∞–ª {ctx.channel.mention} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.")

@channel_group.command(name='—Å–ø–∏—Å–æ–∫', aliases=['list'])
async def channel_list(ctx):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    guild_id = ctx.guild.id
    
    if guild_id not in ALLOWED_CHANNELS or not ALLOWED_CHANNELS[guild_id]:
        await ctx.reply("üìã –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö (—Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç).")
        return
    
    embed = discord.Embed(
        title="üìã –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞",
        color=0x00ff00
    )
    
    channel_mentions = []
    for channel_id in ALLOWED_CHANNELS[guild_id]:
        channel = ctx.guild.get_channel(channel_id)
        if channel:
            channel_mentions.append(channel.mention)
        else:
            channel_mentions.append(f"–£–¥–∞–ª–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª (ID: {channel_id})")
    
    embed.description = "\n".join(channel_mentions) if channel_mentions else "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
    embed.set_footer(text="–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö")
    
    await ctx.reply(embed=embed)

@channel_group.command(name='—Å–±—Ä–æ—Å', aliases=['reset'])
@commands.has_permissions(administrator=True)
async def channel_reset(ctx):
    """–°–±—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ (—Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã)"""
    guild_id = ctx.guild.id
    
    if guild_id in ALLOWED_CHANNELS:
        ALLOWED_CHANNELS[guild_id] = []
    
    await ctx.reply("‚úÖ –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å–±—Ä–æ—à–µ–Ω. –ë–æ—Ç —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö!")

@bot.event
async def on_command_error(ctx, error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–º–∞–Ω–¥"""
    if isinstance(error, commands.CommandNotFound):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥
        if is_channel_allowed(ctx):
            await ctx.reply(PHRASES['unknown'])
    elif isinstance(error, commands.MissingPermissions):
        if is_channel_allowed(ctx):
            await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    elif isinstance(error, commands.MissingRequiredArgument):
        if is_channel_allowed(ctx):
            await ctx.reply("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!–ø–æ–º–æ—â—å` –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
    else:
        if is_channel_allowed(ctx):
            await ctx.reply(PHRASES['error'])
            print(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {error}")

@bot.event
async def on_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
    if message.author.bot:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è –∫–æ–º–∞–Ω–¥
    if message.content.startswith('!'):
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞
        ctx = await bot.get_context(message)
        if not is_channel_allowed(ctx):
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    await bot.process_commands(message)
    
    # –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö)
    if bot.user.mentioned_in(message):
        ctx = await bot.get_context(message)
        if is_channel_allowed(ctx):
            await message.add_reaction('üëã')

@bot.event
async def on_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
    if message.author.bot:
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    await bot.process_commands(message)
    
    # –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if bot.user.mentioned_in(message):
        await message.add_reaction('üëã')

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    token = os.getenv('DISCORD_TOKEN')
    if not token:
        print("–û—à–∏–±–∫–∞: DISCORD_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    else:
        try:
            bot.run(token)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")